# Cline Rules: NEAR Subscription Service

## Project Patterns

### Smart Contract Structure
- Smart contract is written in Rust using near-sdk v5.7.0
- Contract uses IterableMap, IterableSet, and LookupMap for data storage
- Subscription data is stored on-chain for transparency and security
- Function call access keys are used for limited payment authorization

### Code Organization
- Contract code is organized into modules (lib.rs, models.rs, collateral.rs, utils.rs)
- Models are defined in models.rs with appropriate serialization
- Main contract logic is in lib.rs

### Naming Conventions
- Snake case for function names (e.g., `create_subscription`, `process_payment`)
- CamelCase for struct and enum names (e.g., `Subscription`, `PaymentMethod`)
- Descriptive variable names that clearly indicate purpose

### Error Handling
- Use `require!` macro for validation checks
- Return detailed error messages in PaymentResult for payment failures
- Use Option types for nullable values

### Access Control
- Owner-only access for admin functions
- User-specific access for subscription management
- Key-based access for payment processing

## Development Workflow

### Smart Contract Development
- Use Rust with near-sdk v5.7.0
- Test contract functions thoroughly
- Optimize for gas usage

### Shade Agent Development
- Use TypeScript/JavaScript with Phala dstack SDK
- Implement secure key management within TEEs
- Design robust error handling and retry mechanisms

### UI Development
- Use Next.js and React
- Implement wallet connection for NEAR
- Create intuitive interfaces for subscription management

## Project Preferences

### Technology Stack
- NEAR Protocol for blockchain
- Phala Network for TEEs
- Next.js for frontend
- Rust for smart contract
- TypeScript/JavaScript for agent and frontend

### Security Considerations
- Private keys must be securely generated and stored within TEEs
- Function call access keys should have specific allowances and method restrictions
- All subscription terms should be clearly defined and visible to users

### User Experience
- Subscription creation should be straightforward and user-friendly
- Users should have clear visibility into their subscription terms and payment history
- Users should be able to easily manage their subscriptions (pause, cancel, etc.)

## Implementation Details

### Subscription Creation Flow
1. User selects a subscription plan from a merchant
2. User approves creation of a function call access key with specific limitations
3. User creates the subscription, linking it to the access key
4. Payments are automatically processed when due
5. User can view, pause, or cancel the subscription at any time

### Payment Processing Flow
1. Shade Agent queries the contract for due subscriptions
2. For each due subscription, the agent retrieves/derives the private key
3. Agent signs and submits the payment transaction
4. Contract verifies key authorization and processes the payment
5. Contract updates the next payment date

### Key Management
- Private keys are generated and stored within TEEs
- Public keys are registered with specific subscriptions
- Keys are limited to specific contract methods and maximum allowances
